#!/bin/sh
# vim: set filetype=ruby:

RUBY_EXE=''
if command -v ruby >/dev/null && ruby -e 'exit RUBY_VERSION.split(".").first(2).join(".").to_f >= 2.3'; then
  RUBY_EXE=ruby
else
  brew_path="$(command -v brew)"
  if [ $? = 0 ]; then
    portable_ruby="$(dirname $(dirname "$brew_path"))/Homebrew/Library/Homebrew/vendor/portable-ruby/current/bin/ruby"
    if [ -f $poratable_ruby ]; then
      RUBY_EXE="$portable_ruby"
    else
      portable_ruby="$(dirname $(dirname "$brew_path"))/Library/Homebrew/vendor/portable-ruby/current/bin/ruby"
      if [ -f $poratable_ruby ]; then
        RUBY_EXE="$portable_ruby"
      fi
    fi
  fi
fi

if [ -z $RUBY_EXE ]; then
  brew_website="Homebrew at https://brew.sh"
  [ $(uname) = Linux ] && brew_website="Linuxbrew at https://linuxbrew.sh"
  echo >&2 "Could not find ruby (version >= 2.3) executable.\nPlease install $brew_website first."
  exit
fi

exec "$RUBY_EXE" -x "$0" "$@"

#!/usr/bin/env ruby

require 'optparse'
require 'yaml'

options = {}
OptionParser.new do |opts|
  opts.banner =
    'Usage: brew-compose [-f <arg>...] [options] [COMMAND]

Commands:
    list                             list all brew formulae in compose file
    install                          install formulaes according to compose file

Options:
    -h, --help                       print this help'

  opts.on(
    '-f',
    '--file FILE',
    'specify an alternate compose file (default: ~/.brew-compose.yml)'
  ) { |v| options[:file] = v }
  opts.on(
    '-v',
    '--verbose',
    'print verbose debugging information to console'
  ) { |v| options[:verbose] = v }
end.parse!

verbose = options[:verbose] || false
file = options[:file] || '~/.brew-compose.yml'
commands = ARGV

p RUBY_VERSION
p file
p verbose
p commands

case commands[0]
when 'list', 'lis', 'li', 'l'
  output = YAML.load(File.read(File.expand_path(file)))
  p output['formulae'].keys.join(' ')
when 'install', 'instal', 'insta', 'inst', 'ins', 'in', 'i'
  output = YAML.load(File.read(File.expand_path(file)))
  p `brew install #{output['formulae'].keys.join(' ')}`
else
  p "#{commands[0]} is not a recogized command"
end
